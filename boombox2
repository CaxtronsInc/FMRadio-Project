#include <p18f4520.h>
#include <i2c.h>
#include "fm.h"
#include <delays.h>
#include <stdlib.h>
#include <math.h>
//#include<iostream.h>

#pragma config OSC = INTIO67   // Internal osc, RA6=CLKO, RA7=I/O
#pragma config FCMEN = OFF  	// Fail-Safe Clock Monitor disabled 
#pragma config IESO = OFF		// Oscillator Switchover mode disabled 
#pragma config WDT = OFF        // WDT disabled (control through SWDTEN bit)
#pragma config PWRT = OFF       // racmod  -> PWRT disabled
#pragma config MCLRE = ON       // MCLR pin enabled; RG5 input pin disabled
#pragma config XINST = OFF      // Instruction set extension disabled
#pragma config BOREN = OFF      // Brown-out controlled by software
#pragma config BORV = 3       // Brown-out voltage set for 2.0V, nominal
#pragma config STVREN = OFF		// Stack full/underflow will not cause Reset
//#pragma config CP0 = OFF, CP1 = OFF, CP2 = OFF, CP3 = OFF 			// Program memory block not code-protected 

//*******************************************************************************************
//*******************************************************************************************
unsigned int mute_test=0; 
int RotChange(unsigned int rotA, unsigned int *volChange);
void vol_minus(void);
void vol_add(void);
unsigned char FMfrequenc(unsigned int f);
unsigned char FMchan(unsigned int *chn);
// FM register bank defaults -
rom unsigned int regDflt[18] = {
	0xFFFF,     // R0 -- the first writable register .  (disable xo_en)   
	0x5B15,     // R1.   
	0xD0B9,     // R2.   
	0xA010,     // R3   seekTHD = 16   
	0x0780,     // R4   
	0x28AB,     // R5   
	0x6400,     // R6   
	0x1EE7,     // R7   
	0x7141,     // R8   
	0x007D,     // R9   
	0x82C6,     // R10  disable wrap   
	0x4F55,     // R11. <--- (disable xo_output)   
	0x970C,     // R12.   
	0xB845,     // R13   
	0xFC2D,     // R14   
	0x8097,     // R15   
	0x04A1,     // R16   
	0xDF6A      // R17
};
unsigned int fave_stations[] = {875, 881, 903, 964, 1046, 1129};

rom unsigned char vol[19]={
	0x0F, 0xCF, 0xDF, 0xFF,  0xCB, 0xDB, 0xFB, 0xFA,
	0xF9, 0xF8, 0xF7, 0xD6,  0xE6, 0xF6, 0xE3, 0xF3,
	0xF2, 0xF1, 0xF0
};


#pragma code

void check_buttons(void) 
{ 
	
    unsigned int bounce_count = 0;
	unsigned int volChange=0;
	unsigned int rotA=PORTDbits.RD0;
	unsigned int rotB=PORTDbits.RD1;
	unsigned char print_text[]="  Manual Tune   ";
	unsigned char txt_NowPlaying[]="  Now Playing:  ";
	float hold_count = 0;

	while(volChange==0){ 
//************************************************************************************************  
	    do
		{ 
	        if (ASk_SSK_down) bounce_count++;                          // pressed state detected 
	        Delay10TCYx(25);                                            // delay 250 cycles or 1ms. 
	    } while ((bounce_count < DetectsInARow) && ASk_SSK_down);  
	  
	    if (ASk_SSK_down && (bounce_count == DetectsInARow))
	    { 
			TMR0H = 0;                      // Clear timer count
   		 	TMR0L = 0;
			INTCONbits.TMR0IF = 0;          // Reset Timer flag
			T0CONbits.TMR0ON = 1;           // Start timer
			if (tune_type==0)
			{
				hold_count = 0; 
		    	do{
		        	if (ASk_SSK_down) hold_count++; 
		        	Delay10TCYx(40); 
		      	} while ((hold_count < 2000) && ASk_SSK_down); 
				
				if (hold_count == 2000)
		        { 
		          	tune_type = 1;
		
		          	regImg[1] = regImg[1] | 0b0000000000000010; 
		          	if (FMwrite(1) != XS) return XF;                //Set MUTE bit 
		
		          	Delay10KTCYx(100); 
					print_to_screen(print_text,1);
		
		          	regImg[1] = regImg[1] & 0b1111111111111101;
		        	if (FMwrite(1) != XS) return XF;                //Clear MUTE bit 

					while (ASk_SSK_down)
					{
						TMR0H = 0;                      // Clear timer count
			   		 	TMR0L = 0;
						INTCONbits.TMR0IF = 0;          // Reset Timer flag
						T0CONbits.TMR0ON = 1;           // Start timer
					}
		        } 
			}
	
	        Tune_Up(0);
	
			if (tune_type==0) 
			{
				while (ASk_SSK_down);
			}

		} 
		
	//**************************************************************************************************
	
	//**************************************************************************************************
	    bounce_count = 0; 
	  
	    do
		{ 
	        if (ASk_SSK_up) bounce_count++;                          // pressed state detected 
	        Delay10TCYx(25);                                            // delay 250 cycles or 1ms. 
	    } while ((bounce_count < DetectsInARow) && ASk_SSK_up);  
	  
	    if (ASk_SSK_up && (bounce_count == DetectsInARow))
	    { 
			TMR0H = 0;                      // Clear timer count
   		 	TMR0L = 0;
			INTCONbits.TMR0IF = 0;          // Reset Timer flag
			T0CONbits.TMR0ON = 1;           // Start timer
			if (tune_type==0)
			{
				hold_count = 0; 
		    	do{
		        	if (ASk_SSK_up) hold_count++; 
		        	Delay10TCYx(40); 
		      	} while ((hold_count < 2000) && ASk_SSK_up); 
				
				if (hold_count == 2000)
		        { 
		          	tune_type = 1;
		
		          	regImg[1] = regImg[1] | 0b0000000000000010; 
		          	if (FMwrite(1) != XS) return XF;                //Set MUTE bit 
		
		          	Delay10KTCYx(100); 
					print_to_screen(print_text,1);
		
		          	regImg[1] = regImg[1] & 0b1111111111111101;
		        	if (FMwrite(1) != XS) return XF;                //Clear MUTE bit 

					while (ASk_SSK_up)
					{
						TMR0H = 0;                      // Clear timer count
			   		 	TMR0L = 0;
						INTCONbits.TMR0IF = 0;          // Reset Timer flag
						T0CONbits.TMR0ON = 1;           // Start timer
					}
		        } 
			}
	
	        Tune_Up(1);
	
			if (tune_type==0) 
			{
				while (ASk_SSK_up);
			}

		} 
	//**************************************************************************************************
	
	//**************************************************************************************************
		bounce_count = 0; 
	
	        if (rotA!=PORTDbits.RD0){(vi += RotChange(rotA,&volChange));volume();}  
	//**************************************************************************************************
	 bounce_count = 0; 
	    if (PORTBbits.RB2){mute();}
	//**************************************************************************************************
	
	//**************************************************************************************************
	    bounce_count = 0; 
	  
	    do{ 
	        if (PRESET_1) bounce_count++;                          // pressed state detected 
	        Delay10TCYx(25);                                            // delay 250 cycles or 1ms. 
	    }   while ((bounce_count < DetectsInARow) && PRESET_1);  
	  
	    if (PRESET_1 && (bounce_count == DetectsInARow))  
	    { 
	        hold_count = 0; 
	    	do{
	        	if (PRESET_1) hold_count++; 
	        	Delay10TCYx(50); 
	      	} while ((hold_count < 2000) && PRESET_1); 
	  
	        if (hold_count == 2000) 
	        { 
	          	set_fave(0);
				print_to_screen(txt_Fav1,1);
				fqout(); 
	          	regImg[1] = regImg[1] | 0b0000000000000010; 
	          	if (FMwrite(1) != XS) return XF;                //Set MUTE bit 
	          	Delay10KTCYx(200); 
	          	regImg[1] = regImg[1] & 0b1111111111111101;
	        	if (FMwrite(1) != XS) return XF;                //Clear MUTE bit 
	        } 
	        else
	        { 
	            load_fave(0);
				print_to_screen(txt_Fav_curr1,1);
			
	        } 
	 
	        while (PRESET_1); 
	    }  
		if (INTCONbits.TMR0IF == 1)
		{
			tune_type = 0;
			print_to_screen(txt_NowPlaying,1);
			INTCONbits.TMR0IF = 0;          // Clear timer flag
		}
//********************************************************************************************************
			    bounce_count = 0; 
	  
	    do{ 
	        if (PRESET_2) bounce_count++;                          // pressed state detected 
	        Delay10TCYx(25);                                            // delay 250 cycles or 1ms. 
	    }   while ((bounce_count < DetectsInARow) && PRESET_2);  
	  
	    if (PRESET_2 && (bounce_count == DetectsInARow))  
	    { 
	        hold_count = 0; 
	    	do{
	        	if (PRESET_2) hold_count++; 
	        	Delay10TCYx(50); 
	      	} while ((hold_count < 2000) && PRESET_2); 
	  
	        if (hold_count == 2000) 
	        { 
	          	set_fave(1);
				print_to_screen(txt_Fav2,1);
				fqout(); 
	          	regImg[1] = regImg[1] | 0b0000000000000010; 
	          	if (FMwrite(1) != XS) return XF;                //Set MUTE bit 
	          	Delay10KTCYx(200); 
	          	regImg[1] = regImg[1] & 0b1111111111111101;
	        	if (FMwrite(1) != XS) return XF;                //Clear MUTE bit 
	        } 
	        else
	        { 
	            load_fave(1);
				print_to_screen(txt_Fav_curr2,1);
			
	        } 
	 
	        while (PRESET_2); 
	    }  
		if (INTCONbits.TMR0IF == 1)
		{
			tune_type = 0;
			print_to_screen(txt_NowPlaying,1);
			INTCONbits.TMR0IF = 0;          // Clear timer flag
		}
//***************************************************************************************************************
			    bounce_count = 0; 
	  
	    do{ 
	        if (PRESET_3) bounce_count++;                          // pressed state detected 
	        Delay10TCYx(25);                                            // delay 250 cycles or 1ms. 
	    }   while ((bounce_count < DetectsInARow) && PRESET_3);  
	  
	    if (PRESET_3 && (bounce_count == DetectsInARow))  
	    { 
	        hold_count = 0; 
	    	do{
	        	if (PRESET_3) hold_count++; 
	        	Delay10TCYx(50); 
	      	} while ((hold_count < 2000) && PRESET_3); 
	  
	        if (hold_count == 2000) 
	        { 
	          	set_fave(2);
				print_to_screen(txt_Fav3,1);
				fqout(); 
	          	regImg[1] = regImg[1] | 0b0000000000000010; 
	          	if (FMwrite(1) != XS) return XF;                //Set MUTE bit 
	          	Delay10KTCYx(200); 
	          	regImg[1] = regImg[1] & 0b1111111111111101;
	        	if (FMwrite(1) != XS) return XF;                //Clear MUTE bit 
	        } 
	        else
	        { 
	            load_fave(2);
				print_to_screen(txt_Fav_curr3,1);
			
	        } 
	 
	        while (PRESET_3); 
	    }  
		if (INTCONbits.TMR0IF == 1)
		{
			tune_type = 0;
			print_to_screen(txt_NowPlaying,1);
			INTCONbits.TMR0IF = 0;          // Clear timer flag
		}
//******************************************************************************************************
				    bounce_count = 0; 
	  
	    do{ 
	        if (PRESET_4) bounce_count++;                          // pressed state detected 
	        Delay10TCYx(25);                                            // delay 250 cycles or 1ms. 
	    }   while ((bounce_count < DetectsInARow) && PRESET_4);  
	  
	    if (PRESET_4 && (bounce_count == DetectsInARow))  
	    { 
	        hold_count = 0; 
	    	do{
	        	if (PRESET_4) hold_count++; 
	        	Delay10TCYx(50); 
	      	} while ((hold_count < 2000) && PRESET_4); 
	  
	        if (hold_count == 2000) 
	        { 
	          	set_fave(3);
				print_to_screen(txt_Fav4,1);
				fqout(); 
	          	regImg[1] = regImg[1] | 0b0000000000000010; 
	          	if (FMwrite(1) != XS) return XF;                //Set MUTE bit 
	          	Delay10KTCYx(200); 
	          	regImg[1] = regImg[1] & 0b1111111111111101;
	        	if (FMwrite(1) != XS) return XF;                //Clear MUTE bit 
	        } 
	        else
	        { 
	            load_fave(3);
				print_to_screen(txt_Fav_curr4,1);
			
	        } 
	 
	        while (PRESET_4); 
	    }  
		if (INTCONbits.TMR0IF == 1)
		{
			tune_type = 0;
			print_to_screen(txt_NowPlaying,1);
			INTCONbits.TMR0IF = 0;          // Clear timer flag
		}
//********************************************************************************************************
			    bounce_count = 0; 
	  
	    do{ 
	        if ( PRESET_5) bounce_count++;                          // pressed state detected 
	        Delay10TCYx(25);                                            // delay 250 cycles or 1ms. 
	    }   while ((bounce_count < DetectsInARow) &&  PRESET_5);  
	  
	    if ( PRESET_5 && (bounce_count == DetectsInARow))  
	    { 
	        hold_count = 0; 
	    	do{
	        	if ( PRESET_5) hold_count++; 
	        	Delay10TCYx(50); 
	      	} while ((hold_count < 2000) &&  PRESET_5); 
	  
	        if (hold_count == 2000) 
	        { 
	          	set_fave(4);
				print_to_screen(txt_Fav5,1);
				fqout(); 
	          	regImg[1] = regImg[1] | 0b0000000000000010; 
	          	if (FMwrite(1) != XS) return XF;                //Set MUTE bit 
	          	Delay10KTCYx(200); 
	          	regImg[1] = regImg[1] & 0b1111111111111101;
	        	if (FMwrite(1) != XS) return XF;                //Clear MUTE bit 
	        } 
	        else
	        { 
	            load_fave(4);
				print_to_screen(txt_Fav_curr5,1);
			
	        } 
	 
	        while ( PRESET_5); 
	    }  
		if (INTCONbits.TMR0IF == 1)
		{
			tune_type = 0;
			print_to_screen(txt_NowPlaying,1);
			INTCONbits.TMR0IF = 0;          // Clear timer flag
		}
//*******************************************************************************************************
	 bounce_count = 0; 
	  
	    do{ 
	        if ( PRESET_6) bounce_count++;                          // pressed state detected 
	        Delay10TCYx(25);                                            // delay 250 cycles or 1ms. 
	    }   while ((bounce_count < DetectsInARow) &&  PRESET_6);  
	  
	    if ( PRESET_5 && (bounce_count == DetectsInARow))  
	    { 
	        hold_count = 0; 
	    	do{
	        	if ( PRESET_6) hold_count++; 
	        	Delay10TCYx(50); 
	      	} while ((hold_count < 2000) &&  PRESET_6); 
	  
	        if (hold_count == 2000) 
	        { 
	          	set_fave(5);
				print_to_screen(txt_Fav6,1);
				fqout(); 
	          	regImg[1] = regImg[1] | 0b0000000000000010; 
	          	if (FMwrite(1) != XS) return XF;                //Set MUTE bit 
	          	Delay10KTCYx(200); 
	          	regImg[1] = regImg[1] & 0b1111111111111101;
	        	if (FMwrite(1) != XS) return XF;                //Clear MUTE bit 
	        } 
	        else
	        { 
	            load_fave(5);
				print_to_screen(txt_Fav_curr6,1);
			
	        } 
	 
	        while ( PRESET_6); 
	    }  
		if (INTCONbits.TMR0IF == 1)
		{
			tune_type = 0;
			print_to_screen(txt_NowPlaying,1);
			INTCONbits.TMR0IF = 0;          // Clear timer flag
		}
	}  
	
    return; 
} 

//**************************************************************************************************


void check_timer(void)
{
	if (INTCONbits.TMR0IF == 0)
	{
		return 1;
	}

	return 0;
}


void Tune_Up(unsigned int up) 
{ 
    if (tune_type == 0)
	{
		Seek_Up(up);
	} 
    else if (tune_type == 1)
	{
		nextChan(up);
	}
} 

void mute (void)
{	unsigned char data6[]="     MUTED.     ";
	if(mute_test==0){
	regImg[1] = regImg[1] | 0b0000000000000010;  //Set MUTE bit 
	if (FMwrite(1) != XS) return XF;mute_test=1;
	i=0;line(0xd0);
	while(data6[i]!='\0'){dis_data(data6[i]);Delay_ms(50);i++;}} 
	else{
	if(mute_test==1)
	regImg[1] = regImg[1] & 0b1111111111111101;//Clear MUTE bit
	if (FMwrite(1) != XS) return XF;mute_test=0;volume();}
	 
	while (PORTBbits.RB2);           
}

int RotChange(unsigned int rotA, unsigned int *volChange)
{

	if(PORTDbits.RD0>rotA&&PORTDbits.RD1==1){
	*volChange=1;if(vi>0){ return -1;}else{return 0;}
	}
	if(PORTDbits.RD0<rotA&&PORTDbits.RD1==1){
	*volChange=1;if(vi<18){ return 1;}else{return 0;}	
	}
	if(PORTDbits.RD0 < rotA && PORTDbits.RD1==0){
	*volChange=1;if(vi>0){ return -1;}else{return 0;}	
	}
	if(PORTDbits.RD0 > rotA && PORTDbits.RD1==0){
	*volChange=1;if(vi<18){ return 1;}else{return 0;}
	}	
	return 0;		
}

unsigned char nextChan(unsigned char up) {

	unsigned int chn;
	
	if (FMchan(&chn) != XS) return XF;
	chn += up ? 691 : 689;
	if(chn<875)
	{
		chn = 1080;
		return FMfrequenc(chn);
	}
	if(chn>1080)
	{
		chn = 875;
		return FMfrequenc(chn);
	}
	return FMfrequenc(chn);
	
}

void dly(int d){int i = 0;for ( ; d; --d)for (i = 100;  i;  --i) ;}
// end dly ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

//####################################################################

void Delay_ms(int d){int i = 0;for ( ; d; --d)for (i = 100;  i;  --i);}
//####################################################################

void Init() {
	int i;
	buttons = 0;
	OSCCON = 0b01110010;        	// Select 8 MHz internal oscillator
	//LCDSE0 = 0b11111111;        	// Enable  LCD segments 07-00
	//LCDSE1 = 0b11111111;        	// Enable  LCD segments 15-08
	//LCDSE2 = 0b11111111;        	// Enable  LCD segments 23-16
	//LCDSE3 = 0b00000000;        	// Disable LCD segments 31-24
	//LCDCON = 0b10001000;         	// Enab LC controller. Static mode. INTRC clock
	//LCDPS  = 0b00110110;         	// 37 Hz frame frequency
	ADCON1 = 0b00111111;        	// Make all ADC/IO pins digital
	TRISA = 0b00000011;             // RA0 and RA1 pbutton
	TRISB = 0b00100111;				// RB0 and RB5 pbutton
	TRISC = 0b00000000;				// RC3 and RC4 do the I2C bus
	LATC = 0;
	TRISC = 0b11011000;				// RC3 and RC4 do the I2C bus
	TRISD = 0b00000011;				
	//TRISG = 0b11111111;				// RG0, RG1 & RG3 pbutton
	PORTA = 0;
	PORTB = 0;
	PORTC = 0;
    INTCONbits.TMR0IF = 0;          // Clear timer flag
	T0CON = 0b00000110;				// Prescale by 128
    //T0CON = 0b00001000;             // No prescale
    TMR0H = 0;                      // Clear timer count
    TMR0L = 0;
    T0CONbits.TMR0ON = 1;           // Start timer
	OpenI2C( MASTER, SLEW_OFF);
	SSPADD = 0x3F;
	vi = 15;	

}
// end Init ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

/*
 * Look up the segment pattern for a hex value.
 * @param hx The hexadecimal value, 0 through 15.
 * @return The segment pattern with segment a in bit pos 0, segment b 
 *	in bit pos 1 etc., up to segment g in bit pos 6.
 */

void segWrt(unsigned char segOrd,  unsigned char state) { 
  
    //unsigned char bitSelect; 
    //unsigned char *LCReg; 
  
    //if (segOrd > 23) return; 
    //LCReg = (unsigned char *)&LCDDATA0 + (segOrd >> 3); 
    //bitSelect = 1 << (segOrd & 0x07); 
    //if (state) *LCReg  |=  bitSelect;     // Segment on 
    //else *LCReg &= ~bitSelect;                // Segment off 
} 
// 
// end segWrt ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ 
unsigned char hex2seg(unsigned char hx) {

	static const rom unsigned char tbl[] = {

		// gfedcba
		0b00111111,		// 0
		0b00000110,		// 1
		0b01011011,		// 2
		0b01001111,		// 3
		0b01100110,		// 4
		0b01101101,		// 5
		0b01111101,		// 6
		0b00000111,		// 7
		0b01111111,		// 8
		0b01101111,		// 9
		0b01110111,		// A
		0b01111100,		// b
		0b00111001,		// C
		0b00111110,		// d
		0b01111001,		// E
		0b01110001		// F
	} ;
	unsigned char *LCReg;

	hx &= 0xf;
	return tbl[hx];
}
//
// end hex2seg ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

/*
 * Display one digit on the LCD.
 *
 * @param d The value to display, 0 through 15.
 *
 * @param position Which digit to show:
 * 
 *	0 = right-most digit, ***n
 *	1 = **n*
 *	2 = *n**
 *	3 = n***
 *
 * Digit 3 (the left-most 'half digit') will show only for dOrd = 1.
 */
void showDigit(unsigned char position,  unsigned char dOrd) {

//    unsigned char *dPtr = (unsigned char *)&LCDDATA0;  // Point to digit 0;
//	unsigned char segOrd;
//	unsigned char patern;
//
//	if (position == 3) {
//		segWrt(21, dOrd == 1);
//		return;
//	}
//	if (position > 2) return;
//	patern = hex2seg(dOrd);
//	for (segOrd = position * 7;  segOrd < (position * 7 + 7);  segOrd++) {
//		segWrt(segOrd, patern & 1);
//		patern >>= 1;
//	}
}
// end showDigit ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

/*
 * Display the decimal representation of a number on the LCD.
 * @param n The number to display.  Between 0 and 1999.
 */
void showNumber(unsigned int n) {

    unsigned char dgt;
    unsigned char posn;
    unsigned int exp;

	for (posn = 3, exp = 1000;  posn <= 3;  posn--, exp /= 10) {
		dgt = n / exp;
		showDigit(posn, dgt);
		n -= dgt * exp;
	}
}
// end showNumber ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

/*
 * Retrieve channel number (0 - 511) from the receiver chip.
 * @param chn Where to store the channel.
 * @return XS if successful, else XF on failure.
 */
unsigned char readChan(unsigned int *chan) {

    unsigned int chn;

	if (FMread(FMCHIPSTSADR, &chn) != XS) return XF;
	chn >>= 7;
	*chan = chn;
	return XS;
}
// end readChan ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
/*
 * Display the frequency that the receiver chip is set to.
 * @return XS if successful, else XF on failure.
 */
unsigned char showFreq() {

    unsigned int chan;
    unsigned int fl;

	if (readChan(&chan) != XS) return XF;
	fl = chan + 690;
	showNumber(fl);
	segWrt(LCDSEGDP3, TRUE);		// Do the DP
	return XS;
}
//
// end showFreq ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

/*
 * Test the button debounce routine.
 * Change the T0CON prescale
 * to, say, 16 for best validation.
 */
/*void bTest() {
	unsigned int tally = 0;
	unsigned char b;
	unsigned char evt;

	for (;;) {
		evt = butnEvent(&b);
		switch (evt) {
			case 0 : break;
			case 1 : 
				tally += b;
				showNumber(tally);
				break;
			case 2 :
				tally -= b;
				showNumber(tally);
				break;
			default : showNumber(1999);
		}
	}
}*/
//
// end bTest ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

/*
 * FMwrite() -  Write a two byte word to the FM module.  The new 
 * register contents are obtained from the image bank.
 * @param adr The address of the register in the FM module that needs 
 * to be written.
 * @return XS on success or XF on error.
 */
unsigned char FMwrite(unsigned char adr) {

	unsigned int  regstr;
	unsigned char firstByt;
	unsigned char secndByt;
	unsigned char rpy;

	firstByt = regImg[adr] >> 8;
	secndByt = regImg[adr];

	StartI2C();					// Begin I2C communication
	IdleI2C();

	// Send slave address of the chip onto the bus
	if (WriteI2C(FMI2CADR)) return XF;
	IdleI2C();
	WriteI2C(adr);				// Adress the internal register
	IdleI2C();
	WriteI2C(firstByt);			// Ask for write to FM chip
	IdleI2C();
	WriteI2C(secndByt);
	IdleI2C();
	StopI2C();
	IdleI2C();
	return XS;
}
// end FMwrite ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

/*
 * FMread - Read a two byte register from the FM module.
 * @param regAddr The address of the register in the module that needs         to be read.
 * @param data Where to store the reading.
 * @return XS on success or XF on error.
 */
unsigned char FMread(unsigned char regAddr, unsigned int *data) {

	unsigned char firstByt;
	unsigned char secndByt;

	StartI2C();					// Begin I2C communication
	IdleI2C();					// Allow the bus to settle

	// Send address of the chip onto the bus
	if (WriteI2C(FMI2CADR)) return gerr = GERWCOL, XF;	
	IdleI2C();
	WriteI2C(regAddr);			// Adress the internal register
	IdleI2C();
	RestartI2C();				// Initiate a RESTART command
	IdleI2C();
	WriteI2C(FMI2CADR + DEVRD);	// Ask for read from FM chip
	IdleI2C();
	firstByt = ReadI2C(); 		// Returns the MSB byte
	IdleI2C();
	AckI2C();					// Send back Acknowledge
	IdleI2C();
	secndByt = ReadI2C();		// Returns the LSB of the temperature
	IdleI2C();
	NotAckI2C();
	IdleI2C();
	StopI2C();
	IdleI2C();
	*data = firstByt;
	*data <<= 8;
	*data = *data | secndByt;

	return XS;
}
// end FMread ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
/*
 * FMready - See if the FM module is ready.
 * @param rdy Where to store the busy/ready status.  Will become
 * non-zero if the chip is ready, zero if busy.
 * @return XS on success or XF on error.
 */
unsigned char FMready(unsigned int *rdy) {

	unsigned int sts;

	if (FMread(FMCHIPSTSADR, &sts)  != XS) return XF;
	sts &= FMASKSTATUS;
	*rdy = sts ? TRUE : FALSE;
	return XS;
}
// end FMready ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
/*
 * FMinit() -  Initialise the FM module.  
 * @return XS on success or XF on error.
 */
unsigned char FMinit() {

	unsigned char ad;
	unsigned int dat;

	// Copy default FM register values to the image set -
	for(ad = 0; ad < 18; ad++) regImg[ad] = regDflt[ad];

	dat = regImg[0];
	regImg[0] &= ~1;
	if (FMwrite(0) != XS) return gerr = GERWCOL, XF;
	for(ad = 1; ad < 18; ad++) {
		if (FMwrite(ad) != XS)return gerr = GERWCOL,  XF;
	}

	regImg[0] = dat | 1;
	if (FMwrite(0) != XS) return XF;
	dly(20);
	while (FMready(&dat), !dat) dly(2);
//	showFreq();
	return XS;
}
//
// end FMinit ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
/*
 * errfm() -  Firmware error.   Call this on a showstopper.
 * @return Never!
 */
void errfm() {

	segWrt(LCDSEGZ, TRUE);		// Error flag
	showNumber(gerr);
	for(;;) ;
}
//
// end errfm ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

/*
 * FMfrequenc(f) -  Tune the FM module to new frequency.  
 * @param f The new frequency as a multiple of 100 kHz.
 *
 * @return XS on success or XF on error.
 */
unsigned char FMfrequenc(unsigned int f) {

	unsigned int dat;
	unsigned int cn;		// AR1010 channel number
	freq(f);
	cn = f - 690;

	// NB AR1010 retunes on 0 to 1 transition of TUNE bit -	
	regImg[2] &= ~FMASKTUNE;
	if (FMwrite(2) != XS) return XF;
	regImg[2] &= 0xfe00; 
	regImg[2] |= (cn | FMASKTUNE);
	if (FMwrite(2) != XS) return XF;
	do {
		dly(2);
		if (FMready(&dat) != XS) return XF;
 	} while (!dat);
	fqout();
	
//	return showFreq();
}
// end FMfrequenc ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

/* 
 * FMvers - Obtain the FM chip version.
 * @param vsn Where to store the version number.  Will become
 * 0x65B1 for vintage 2009 devices.
 * @return XS on success or XF on error. *
 */
unsigned char FMvers(unsigned int *vsn) {
	if (FMread(FMCHIPVERSADR, vsn)  != XS) return XF;
	return XS;
}
//
// end FMvers ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

/*
 * FMid - Obtain the FM chip ID.
 * * @param id Where to store the ID number.  Will become
 * 0x1010 for AR1010 devices.
 * @return XS on success or XF on error. *
 */
unsigned char FMid(unsigned int *id) {

	if (FMread(FMCHIPIDADR, id)  != XS) return XF;
	return XS;
}
//
// end FMid ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

/*
 * FMchan - Obtain the current channel setting.
 * @param ch Where to store the channel number.  
 * The frequency is 10 (id + 69) MHz.
 * @return XS on success or XF on error.
 */
unsigned char FMchan(unsigned int *chn) {

	if (FMread(FMCHIPSTSADR, chn)  != XS) return XF;
	*chn  >>= 7;	return XS;
}
//
// end FMchan ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
/*
 * FMstrength() -  Get the signal strength. 
 * @param strength Where to store the signal strength.  
 * The strength is a 7 bit number.
 * @return XS on success or XF on error.
 */
/*unsigned char FMstrength(unsigned int *strength) {

	if (FMread(FMCHIPSTRNGTH, strength) != XS) return XF;
	*strength >>= 9;
	return XS;
}*/
// end FMstrength ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
/*
 * FMinfo() -  Get key register values.  
 */
/*void FMinfo() {

	unsigned int ui;

	if (FMvers(&ui) != XS) return;	// Should be 0x1010
	if (FMid(&ui) != XS) return;	// Should be 0x65b1
	if (FMchan(&ui) != XS) return;
	ui += 690;						// Frequency
	if (FMready(&ui) != XS) return;
	if (FMstrength(&ui) != XS) return;
}*/
//
// end FMinfo ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
/*
 * pSet() -  Tune to preset frequencies.
 * @param up Set to non-zero for next preset up in the list, 
 *  zero for preset down.
 * @return XS on success or XF on error.
 */
unsigned char pSet(unsigned char up) {

	// Presets list.  Multiples of 100 kHz -
	unsigned int frq[] = {875, 881, 903, 964, 1046, 1129};

	unsigned char topChn = sizeof(frq) / sizeof(unsigned int);
	//char *title[] = {"BBC R2", "Eagle", "BBC R1", "BBC Surrey"};
	static unsigned char chn = 0;

	if (up) {
		if (++chn == topChn) chn = 0;
	} else {
		if (chn-- == 0) chn = topChn - 1;
	}
	
	return FMfrequenc(frq[chn]);
}
// end pSet ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

void volume() {

	regImg[ 3] &= 0xF87F;
	regImg[ 3] |= ((unsigned int)vol[vi] & 0x0F) << 7;
	FMwrite(3);
	
	regImg[14] &= 0x0FFF;
	regImg[14] |= ((unsigned int)vol[vi] & 0xF0) << 8;
	FMwrite(14);
	vol_cnt(vi);
	fqout();
}
// end volume ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^


//#######################################################################################

void print_to_screen(unsigned char* text_to_print, unsigned int line_to_print_to)
{
	i=0;

	if (line_to_print_to==1)
	{
		line(0x80);
	}
	else if (line_to_print_to==2)
	{
		line(0xc0);
	}
	else if (line_to_print_to==3)
	{
		line(0x90);
	}
	else if (line_to_print_to==4)
	{
		line(0xd0);
	}

	while(text_to_print[i]!='\0')
	{
		dis_data(text_to_print[i]);
		Delay_ms(1);
		i++;
	}
}

void Name_s(void)
{	
	unsigned char data0[]="CaxtronsFMradio.";
	unsigned char data1[]="    Boombox.    ";
	unsigned char data2[]="By Austin,Graham";
	unsigned char data3[]=" Jamie, Yiannos ";
	unsigned char data4[]="  Now Playing: ";
	unsigned char data5[]="  Volume/Mute:  ";
	
	cleardt();Delay_ms(10);i=0;
	while(data0[i]!='\0'){dis_data(data0[i]);Delay_ms(50);i++;}	
	 i=0;line(0xc0);
	while(data1[i]!='\0'){dis_data(data1[i]);Delay_ms(50);i++;}
	 i=0;line(0x90);
	while(data2[i]!='\0'){dis_data(data2[i]);Delay_ms(50);i++;}
	 i=0;line(0xd0);
	while(data3[i]!='\0'){dis_data(data3[i]);Delay_ms(50);i++;}
	Delay_ms(3000);i=0;
	while(i<85){dis_data(0x20);Delay_ms(50);i++;}	
	cleardt();i=0;
	while(data4[i]!='\0'){dis_data(data4[i]);Delay_ms(50);i++;}
	 i=0;line(0x90);
	while(data5[i]!='\0'){dis_data(data5[i]);Delay_ms(50);i++;}		
}

void lcd_ini(void)	                    
{
	dis_cmd(0x02);		// To initialize LCD in 4-bit mode.
//	dis_cmd(0x28);		// To initialize LCD in 2 lines, 5x7 dots and 4bit mode.
	dis_cmd(0x0C);
	dis_cmd(0x06);
	dis_cmd(0x80);
}
void dis_cmd(unsigned char cmd_value)
{
	unsigned char cmd_value1;
	cmd_value1 = (cmd_value & 0xF0);lcdcmd(cmd_value1);	
	cmd_value1 = ((cmd_value<<4) & 0xF0);lcdcmd(cmd_value1);	
}
void dis_data(unsigned char data_value)
{
	unsigned char data_value1;
	data_value1=(data_value&0xF0);lcddata(data_value1);
	data_value1=((data_value<<4)&0xF0);lcddata(data_value1);	
}
void lcdcmd(unsigned char cmdout)
{
	lcdport=cmdout;rs=0;en=1;Delay_ms(1);en=0;			
}
void lcddata(unsigned char dataout)
{
	lcdport=dataout;rs=1;en=1;Delay_ms(1);en=0;		
}
void cleardt(void)
{
	unsigned char dt=0x1;dis_cmd(dt);Delay_ms(2);
}
void line(unsigned char pos)
{
	dis_cmd(pos);
}
void freq(unsigned int  curr)
{
	unsigned int curr_stn;
	curr_stn = curr;
	parameter=2;
	if(curr_stn < 1000){
	i=3;parameter=0;
	while(curr_stn >0){
	curr_stn2[i--]= curr_stn %10;
	curr_stn /=10;}
	temp2=curr_stn2[1];
	temp1=curr_stn2[2];
	temp0=curr_stn2 [3];}

	if(curr_stn>=1000){
	i=4; parameter = 1;
	while(curr_stn >0){
	curr_stn2[i--]= curr_stn %10;
	curr_stn /=10;}
	temp3=curr_stn2[1];
	temp2=curr_stn2[2];
	temp1=curr_stn2[3];
	temp0=curr_stn2[4];
	parameter=1;      }  	
}

void vol_cnt (unsigned int vol_val)
{
	i=2;
	
	if (vol_val > 9)
	{
		temp5 = vol_val %10;
		vol_val -= 10;
		temp4 = 1;
	}
	else
	{
		temp5 = vol_val %10;
		temp4 = 0;
	}

	parameter = 2;
}
void spc(unsigned int dst)
{	
	unsigned int j;

	for (j=1;j<dst;j++)
	{
		line(0x14);
	}
}


void fqout(void)
{
	unsigned int j;
	unsigned char buf5 = temp5 + '0';
	unsigned char buf4 = temp4 + '0';
	unsigned char buf3 = temp3 + '0';
	unsigned char buf2 = temp2 + '0';
	unsigned char buf1 = temp1 + '0';
	unsigned char buf  = temp0 + '0';
    buf0 = temp;
	//unsigned char 
	if(parameter==0){
	i=0;line(0xc0);spc(5);
	while(i<1){dis_data(buf0);i++;}
	i=0;line(0xc0);spc(6);
	while(i<1){dis_data(buf2);i++;}
	i=0;line(0xc0);spc(7);
	while(i<1){dis_data(buf1);i++;}
	i=0;line(0xc0);spc(8);
	while(i<1){dis_data(0x2E);i++;}
	i=0;line(0xc0);spc(9);
	while(i<1){dis_data(buf);i++;}
	}
	if(parameter==1){
	i=0;line(0xc0);spc(5);
	while(i<1){dis_data(buf3);i++;}
	i=0;line(0xc0);spc(6);
	while(i<1){dis_data(buf2);i++;}
	i=0;line(0xc0);spc(7);
	while(i<1){dis_data(buf1);i++;}
	i=0;line(0xc0);spc(8);
	while(i<1){dis_data(0x2E);i++;}
	i=0;line(0xc0);spc(9);
	while(i<1){dis_data(buf);i++;}
 	}
	if(parameter == 2){

	unsigned char full[]="   FULL BLAST!   ";

	if (vi==18){i=0;line(0xd0);
	while(full[i]!='\0'){dis_data(full[i]);Delay_ms(50);i++;}}
	else{for (j=0;j<=vi;j++){i=0;line(0xd0);spc(j);
	while(i<1){dis_data(0xFF);i++;}}

	for (j=vi+1;j<=16;j++){i=0;line(0xd0);spc(j);
	while(i<1){dis_data(0x20);i++;}}}}}

void fqchng(unsigned int chn)
{
	FMfrequenc(chn);
}

void load_fave(unsigned int fave) 
{ 
    FMfrequenc(fave_stations[fave]); 
    return; 
} 
  
void set_fave(unsigned int fave) 
{ 
    unsigned int ui; 
  
    FMchan(&ui); 
    ui += 690; 
    fave_stations[fave] = ui; 
    return; 
} 

//#############################################################################################

void Seek_Up(unsigned int up){ 
  
    unsigned int dat; 
    unsigned int cn;        // AR1010 channel number 
    unsigned int ui; 
    unsigned int new_chan; 
	unsigned char data[]="EAGLE RADIO";
  
    if (FMchan(&ui) != XS) return; 
    ui += 690;cn = ui - 690; 
  
    // NB AR1010 retunes on 0 to 1 transition of TUNE bit -  
  
    regImg[1] = regImg[1] | 0x02;
    if (FMwrite(1) != XS) return XF;                //Set MUTE bit 
  
    regImg[2] = regImg[2] & 0xFDFF;
    if (FMwrite(2) != XS) return XF;                //Clear Tune Bit 
  
    regImg[3] = regImg[3] & 0xBFFF;
    if (FMwrite(3) != XS) return XF;                //Clear SEEK Bit 
  
    regImg[3] = regImg[3] | 0x4000;    //Set SEEK Bit 
    regImg[3] = regImg[3] | 0x2000;     //Spacing 
  
    if (up == 1) regImg[3] = regImg[3] | 0x8000;       //Seek UP 
    if (up == 0) regImg[3] = regImg[3] & 0x7FFF;       //Seek UP 
  
    regImg[3] = regImg[3] & 0xE7FF;    //Band 
    regImg[3] = regImg[3] & 0xFF80;     //Seek Threshold 
    //regImg[3] = regImg[3] | 0x40;       //Seek Threshold 
  
    if (FMwrite(3) != XS) return XF;                //Clear SEEK Bit 
    do { 
        dly(2); 
        if (FMready(&dat) != XS) return XF; 
    } while (!dat); 
  

    new_chan = 0; 
    FMchan(&new_chan); 
 		
    regImg[2] = 0; 
    regImg[2] = regImg[2] | new_chan; 
    if (FMwrite(2) != XS) return XF;                //Set MUTE bit 
  
    new_chan += 690; 
  
    regImg[1] = regImg[1] & 0b1111111111111101; 
    if (FMwrite(1) != XS) return XF;                //Set MUTE bit 

	freq(new_chan);
	fqout();

    return; 
}
	
void main(void) {

	unsigned char btn;
	unsigned char evt;
	unsigned int ui;
	
	TRISD=0;			// Configure Port D as output port
	LATD=0;
	
	dly(2);	Init();lcd_ini();Name_s();
	if (FMinit() != XS)	gerr = GERFINT,	errfm();
	volume();FMfrequenc(875);fqout();
    tune_type = 0;mute_value = 0; 
 	for (;;) {check_buttons();}}

// end main ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^









